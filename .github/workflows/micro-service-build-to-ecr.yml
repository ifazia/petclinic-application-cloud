name: Service Build Workflow to ECR
run-name: Starting to build ${{ inputs.service-name }}
on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string

jobs:
  build-and-publish-service:
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setting up Java for the Runner
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '11'
          cache: maven

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION_1 }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public
          region: ${{ secrets.AWS_REGION_1 }} 

      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."

      - name: Building the docker Image for ${{ inputs.service-name }}
        id: build-image
        run: |
          cd ${{ inputs.service-name }}
          chmod +x ./mvnw
          ./mvnw spring-boot:build-image -Pk8s -DREPOSITORY_PREFIX=${{ secrets.ECR_REGISTRY }}
          IMAGE_ID=$(docker images -q ${{ secrets.ECR_REGISTRY }}/${{ inputs.service-name }}:latest)
          if [ -z "$IMAGE_ID" ]; then
            echo "Error: Image not found."
            exit 1
          fi
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV
          IMAGE_NAME=${{ inputs.service-name }}:${{ github.run_id }}-${{ github.run_number }}
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Tagging built image
        run: |
          docker tag ${{ env.IMAGE_ID }} ${{ secrets.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Pushing ${{ inputs.service-name }} to Amazon ECR
        run: |
          docker push ${{ secrets.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Update Image Versions
        run: |
          chmod +x ./update-values.sh
          ./update-values.sh

      - name: Check for updated staging-values.yaml
        run: |
          if [ ! -f "helmchart/staging-values.yaml" ]; then
            echo "Error: staging-values.yaml not found."
            exit 1
          fi
      - name: Display git status
        run: git status
  
      - name: Display git diff for staging-values.yaml
        run: git diff helmchart/staging-values.yaml
  
      - name: Commit and push updated staging-values.yaml
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add helmchart/staging-values.yaml
          git commit -m "Update image versions in helmchart/staging-values.yaml"
          git pull --rebase origin main || (git rebase --abort && exit 1)
          git add helmchart/staging-values.yaml # R√©-ajouter le fichier si n√©cessaire apr√®s le rebase
          git commit --amend --no-edit # Modifie le commit pr√©c√©dent pour inclure les modifications r√©sultant du rebase
          git push --force

  deploy-job:
    uses: ./.github/workflows/deploy-staging.yml
    with:
      service-name: ${{ inputs.service-name }}
      service-version: ${{ github.run_id }}-${{ github.run_number }}
    secrets: inherit
    needs: [build-and-publish-service]