name: Service Build Workflow to ECR
run-name: Starting to build ${{ inputs.service-name }}
on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string

jobs:
  build-and-publish-service:
    runs-on: ubuntu-22.04

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setting up Java for the Runner
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'
          cache: maven

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public
          region: us-east-1

      - run: echo "ðŸ’¡ The ${{ github.repository }} repository has been cloned to the runner."

      - name: Building the docker Image for ${{ inputs.service-name }}
        id: build-image
        run: |
          cd ${{ inputs.service-name }}
          chmod +x ./mvnw
          IMAGE_NAME="${{ secrets.ECR_REGISTRY }}/${{ inputs.service-name }}"
          echo "Building image: $IMAGE_NAME"
          ./mvnw spring-boot:build-image -Pk8s -DREPOSITORY_PREFIX=${{ secrets.ECR_REGISTRY }} -Dimage.tag=${{ github.run_id }}-${{ github.run_number }}
          IMAGE_ID=$(docker images -q ${{ secrets.ECR_REGISTRY }}/${{ inputs.service-name }}:latest)
          if [ -z "$IMAGE_ID" ]; then
            echo "Error: Image not found."
            exit 1
          fi
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV
          IMAGE_NAME=${{ inputs.service-name }}:${{ github.run_id }}-${{ github.run_number }}
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Tagging built image
        run: |
          docker tag ${{ env.IMAGE_ID }} ${{ secrets.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Pushing ${{ inputs.service-name }} to Amazon ECR
        run: |
          docker push ${{ secrets.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Update Image Versions
        run: |
          chmod +x ./scripts/update-values.sh
          ./scripts/update-values.sh ${{ inputs.service-name }} ${{ env.IMAGE_NAME }}

      - name: Commit and push updated prod-values.yaml
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add helmchart/prod-values.yaml
          if git diff --cached --quiet; then
            echo "No changes detected in prod-values.yaml, skipping commit."
          else
            git commit -m "Update image versions in helmchart/prod-values.yaml"
            git push
          fi

  deploy-job:
    needs: build-and-publish-service
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.7.5"

      - name: Initialize Terraform
        run: terraform init

      - name: Apply Terraform to get subnet IDs
        id: tf-output
        run: |
          terraform apply -auto-approve
          PUBLIC_SUBNET_IDS=$(terraform output -json public_subnet_ids | jq -c '.')
          echo "PUBLIC_SUBNET_IDS=$PUBLIC_SUBNET_IDS" >> $GITHUB_ENV

      - name: Deploy with Helm
        run: |
          helm upgrade --install my-release ./my-chart \
            --set publicSubnetIds=${{ env.PUBLIC_SUBNET_IDS }}
